import nodemailer from "nodemailer";

interface MailerConfig {
  user: string;
  pass: string;
  host: string;
  port: number;
  secure: boolean;
}

function resolveMailerConfig(): MailerConfig | null {
  const user = process.env.SMTP_USER ?? process.env.GMAIL_USER ?? process.env.EMAIL_USER;
  const pass = process.env.SMTP_PASS ?? process.env.GMAIL_APP_PASSWORD ?? process.env.EMAIL_PASS;

  if (!user || !pass) {
    return null;
  }

  const host = process.env.SMTP_HOST ?? "smtp.gmail.com";
  const port = Number.parseInt(process.env.SMTP_PORT ?? (host === "smtp.gmail.com" ? "465" : "587"), 10);
  const secure = process.env.SMTP_SECURE ? process.env.SMTP_SECURE === "true" : port === 465;

  return {
    user,
    pass,
    host,
    port,
    secure,
  };
}

let transporter: nodemailer.Transporter | null = null;

function getTransporter(config: MailerConfig) {
  if (!transporter) {
    const enableDebug = process.env.SMTP_DEBUG === "true";
    transporter = nodemailer.createTransport({
      host: config.host,
      port: config.port,
      secure: config.secure,
      auth: {
        user: config.user,
        pass: config.pass,
      },
      logger: enableDebug,
      debug: enableDebug,
    });
    if (enableDebug) {
      console.info("[Mailer] Transport created", {
        host: config.host,
        port: config.port,
        secure: config.secure,
        userMasked: config.user.replace(/(.{2}).+(@)/, "$1***$2"),
      });
    }
  }
  return transporter;
}

interface SendPasswordResetEmailInput {
  to: string;
  token: string;
  expiresAt: Date;
}

export interface SendPasswordResetEmailResult {
  delivered: boolean;
  message: string;
  resetUrl: string;
  error?: string;
}

export async function sendPasswordResetEmail({ to, token, expiresAt }: SendPasswordResetEmailInput): Promise<SendPasswordResetEmailResult> {
  console.log("üìß [Mailer] sendPasswordResetEmail called for:", to?.substring(0, 5) + "***");
  const config = resolveMailerConfig();
  const appUrl = process.env.NEXT_PUBLIC_APP_URL ?? "http://localhost:3000";
  const resetUrl = `${appUrl.replace(/\/$/, "")}/reset-password?token=${token}`;

  console.log("üîç [Mailer] Config resolved:", config ? "‚úÖ Yes" : "‚ùå No");
  console.log("üîç [Mailer] APP_URL:", appUrl);
  
  if (!config) {
    const message = "‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ SMTP credentials (.env.local) ‡πÇ‡∏ó‡πÄ‡∏Ñ‡πá‡∏ô‡∏ñ‡∏π‡∏Å‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ß‡πâ‡∏ö‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö";
    console.warn("[Mailer] Unable to send email - missing SMTP credentials");
    return {
      delivered: false,
      message,
      resetUrl,
    };
  }

  try {
    console.log("üìß [Mailer] Creating transport...");
    const transporterInstance = getTransporter(config);
    const ttlMinutes = Math.max(1, Math.round((expiresAt.getTime() - Date.now()) / 60000));

    // Optional connectivity verification before sending (lightweight noop)
    if (process.env.SMTP_VERIFY !== "false") {
      try {
        console.log("üîç [Mailer] Verifying connection...");
        await transporterInstance.verify();
        console.log("‚úÖ [Mailer] Connection verified");
      } catch (verifyError) {
        const msg = verifyError instanceof Error ? verifyError.message : String(verifyError);
        console.error("[Mailer] SMTP verify failed", msg);
      }
    }

    console.log("üìß [Mailer] Sending email to:", to?.substring(0, 5) + "***");
    await transporterInstance.sendMail({
      from: `PlantHub ‚úâÔ∏è <${config.user}>`,
      to,
      subject: "PlantHub | ‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏ï‡∏±‡πâ‡∏á‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà",
      text: `‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡πà‡∏∞/‡∏Ñ‡∏£‡∏±‡∏ö\n\n‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏±‡πâ‡∏á‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà: ${resetUrl}\n‡πÇ‡∏ó‡πÄ‡∏Ñ‡πá‡∏ô‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡∏†‡∏≤‡∏¢‡πÉ‡∏ô ${ttlMinutes} ‡∏ô‡∏≤‡∏ó‡∏µ\n\n‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£ PlantHub`,
      html: `
        <div style="font-family: 'Segoe UI', Tahoma, sans-serif; max-width: 480px; margin: auto;">
          <h2 style="color:#047857;">PlantHub | ‡∏ï‡∏±‡πâ‡∏á‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà</h2>
          <p>‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡∏±‡πâ‡∏á‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà:</p>
          <p style="text-align:center; margin: 24px 0;">
            <a href="${resetUrl}" style="background:#047857; color:#fff; padding:12px 20px; border-radius:9999px; text-decoration:none; display:inline-block;">‡∏ï‡∏±‡πâ‡∏á‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà</a>
          </p>
          <p>‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏ô‡∏µ‡πâ‡πÑ‡∏õ‡∏ß‡∏≤‡∏á‡πÉ‡∏ô‡πÄ‡∏ö‡∏£‡∏≤‡∏ß‡πå‡πÄ‡∏ã‡∏≠‡∏£‡πå: <br /><a href="${resetUrl}">${resetUrl}</a></p>
          <p style="color:#065f46;">‡πÇ‡∏ó‡πÄ‡∏Ñ‡πá‡∏ô‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÉ‡∏ô ${ttlMinutes} ‡∏ô‡∏≤‡∏ó‡∏µ</p>
          <hr style="border:none; border-top:1px solid #d1fae5; margin:24px 0;" />
          <small style="color:#6b7280;">‡∏´‡∏≤‡∏Å‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏∞‡πÄ‡∏ß‡πâ‡∏ô‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ô‡∏µ‡πâ‡πÑ‡∏î‡πâ</small>
        </div>
      `,
    });

    console.log("‚úÖ [Mailer] Email sent successfully");
    return {
      delivered: true,
      message: "‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ï‡∏±‡πâ‡∏á‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢",
      resetUrl,
    };
  } catch (error) {
    const errMessage = error instanceof Error ? error.message : "‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏™‡∏≤‡πÄ‡∏´‡∏ï‡∏∏";
    console.error("[Mailer] Failed to send reset email", {
      error: errMessage,
      host: config?.host,
      port: config?.port,
      secure: config?.secure,
    });
    return {
      delivered: false,
      message: "‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡πÅ‡∏ï‡πà‡∏¢‡∏±‡∏á‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ‡πÇ‡∏ó‡πÄ‡∏Ñ‡πá‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏™‡∏î‡∏á‡∏ö‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠‡πÑ‡∏î‡πâ",
      resetUrl,
      error: errMessage,
    };
  }
}
